# * Nais Nix Action
# This Action is for nix flakes in a nais platform context
# the .#image output will be uploaded to our artifact registry on GAR

# TODO: Add handlers for uploads, static assets to cdn and github releases?

# ** Action metadata
name: "Nais Nix Action"
description: "Check Nix flakes, build Nix packages and Docker images, and push the images"
inputs:
  # *** Google Cloud Parameters
  project_id:
    description: "Google Cloud project ID"
    required: true
  identity_provider:
    description: "Workload Identity Provider"
    required: true
  team:
    description: "Team name"
    required: true
  # *** Docker Parameters
  push:
    description: "Flag to indicate whether to push the images"
    default: true
  extra_tags:
    description: "Extra tags to add to the Docker images"
    required: false
    default: ""
  registry:
    description: "the docker registry to use"
    required: false
    default: "europe-north1-docker.pkg.dev"

# *** output definitions
outputs:
  image:
    description: "the full image address"
    value: ${{ steps.set-outputs.outputs.image }}

# ** Step definitions
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # *** Install nix on the action runner
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v3

    # *** Flake health check
    - name: Check Nix flake inputs
      uses: DeterminateSystems/flake-checker-action@v4

    # *** Magic nix cache
    - uses: DeterminateSystems/magic-nix-cache-action@main

    # *** Flake checks
    - name: Nix Flake Check
      run: nix flake check -L
      shell: bash

    # *** Env setup
    # This is the same as nais/login but without the buildx dependency
    - name: Setup environment
      shell: bash
      id: "setup"
      run: |
        if [ -z "${{ inputs.project_id }}" ]; then
          echo "::error ::project_id not set. Please provide as input."
          exit 1
        elif [ -z "${{ inputs.identity_provider }}" ]; then
          echo "::error ::identity_provider not set. Please provide as input."
          exit 1
        elif [ -z "${{ inputs.team }}" ]; then
          echo "::error ::team not set. Please provide as input."
          exit 1
        fi
        slug=${{ inputs.team }}
        prefix="gar"
        maxLength=30

        hash=$(echo -n "$slug" | sha256sum | cut -d ' ' -f 1)

        prefixLength=${#prefix}
        hashLength=4
        slugLength=$((maxLength - prefixLength - hashLength - 2))

        truncatedSlug=$(echo -n "${slug:0:$slugLength}" | sed 's/-$//')
        truncatedHash=$(echo -n "$hash" | head -c $hashLength)

        # Most of these outputs should probably be envs
        echo "sa_email=${prefix}-${truncatedSlug}-${truncatedHash}@${{ inputs.project_id }}.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
        echo "gar_registry_url=${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.team }}" >> $GITHUB_OUTPUT

    # *** Flake analysis
    - name: Analyze
      id: analyze
      shell: bash
      run: |
        image_name=$(nix eval .#image.drvAttrs.imageName | tr -d '"')
        image_address_prefix="${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.team }}/"
        if [[ $image_name == "$image_address_prefix"* ]]; then
          # Avoid duplication if team already set it,
          #  say for simplifying their GH workflow wrt. nais's `spec.image`
          image_name=${image_name#"$image_address_prefix"}
        fi
        echo "image=${image_name}" >> $GITHUB_OUTPUT

        image_tag=$(nix eval .#image.drvAttrs.imageTag | tr -d '"')
        echo "tag=${image_tag}" >> $GITHUB_OUTPUT

        #  PACKAGES=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | tr "\n" " ")

        SBOM=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | grep -q sbom && echo true || echo false)
        SPEC=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | grep -q spec && echo true || echo false)

        echo "sbom=${SBOM}" >> $GITHUB_OUTPUT
        echo "spec=${SPEC}" >> $GITHUB_OUTPUT

        # echo ${PACKAGES} >> $GITHUB_STEP_SUMMARY
        # echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT

        echo "image_address=${image_address_prefix}${image_name}" >> $GITHUB_OUTPUT

    # *** Add banner with a summary of the image analysis etc
    # - this should be distributed over all the steps
    - name: add banner
      shell: bash
      run: |
        echo "# ![](https://avatars.githubusercontent.com/u/29488289?s=30) Nais nix build" >> $GITHUB_STEP_SUMMARY
        echo "Using the [nais-nix-action](https://github.com/nais/nais-nix-action)" >> $GITHUB_STEP_SUMMARY

    # *** Build SBOM, should the package exist
    - name: Build SBOM
      if: ${{ steps.analyze.outputs.sbom == 'true' }}
      id: build-sbom
      shell: bash
      run: |
        nix build .#sbom --out-link sbom.json

        echo "✅ Built SBOM, $(wc -l sbom.json | awk '{print $1}') lines" >> $GITHUB_STEP_SUMMARY
        echo "sbom=sbom.json" >> $GITHUB_OUTPUT

    # *** Build app spec, should the package exist
    - name: Build spec
      if: ${{ steps.analyze.outputs.spec == 'true' }}
      id: build-spec
      shell: bash
      run: |
        nix build .#spec --out-link spec.yaml
        echo "✅ Built Nais spec as spec.yaml, $(wc -c spec.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY

    - name: Upload spec
      if: ${{ steps.analyze.outputs.spec == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        # what to upload
        path: spec.yaml

        # what to call the upload
        name: spec.yaml

    # *** Build and load images
    # Build the images as a tarball, load the image and retag it with "fully qualified OCI reference name"
    - name: Build Images
      shell: bash
      run: |
        LOADED_IMAGE=$(nix build .#image --out-link result-image && docker load < result-image | awk -F ': ' '{print $2}')
        docker tag $LOADED_IMAGE ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}

        # TODO: There should be a little for loop over the tags from the extra tags input.
        echo "✅ Built image: ${{ steps.analyze.outputs.image_address }}" >> $GITHUB_STEP_SUMMARY

    # *** Goggle clou id: build-images d authentication
    # The "identity provider" here is a _workload identity_
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033" # ratchet:google-github-actions/auth@v1.1.1
      with:
        workload_identity_provider: ${{ inputs.identity_provider }}
        service_account: ${{ steps.setup.outputs.sa_email }}
        token_format: access_token

    - name: "Handle auth failure"
      if: ${{ failure() && steps.auth.outcome == 'failure' }}
      shell: bash
      run: |
        cat <<EOF
        ::error ::Failed to authenticate to Google Cloud.
        EOF

    # *** Login with credentials from Auth
    # Note that this is conditional on inputs.push, which by default is true. you want something else?
    # Try setting it to false
    - name: "Login to registry"
      id: login-to-registry
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # ratchet:docker/login-action@v2
      with:
        registry: "${{ steps.setup.outputs.gar_registry_url }}"
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"
    - name: Push image to registry
      id: push
      shell: bash
      run: |
        docker tag   ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }} ${{ steps.analyze.outputs.image_address }}
        image_sha256=$(docker images --no-trunc --quiet ${{ steps.analyze.outputs.image_address }}:latest)
        echo "image_sha256=${image_sha256}" >> $GITHUB_OUTPUT
        docker push --all-tags ${{ steps.analyze.outputs.image_address }}

    # *** Run cosign et al.
    - name: "Generate SBOM, attest and sign image"
      if: "${{ inputs.push == 'true' && steps.analyze.outputs.sbom == 'true' }}"
      uses: nais/attest-sign@v1.3.1
      with:
        image_ref: ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}@${{ steps.push.outputs.image_sha256 }}
        sbom: ${{ steps.build-sbom.outputs.sbom }}

    # *** These outputs are mostly used by nais/deploy-aciton
    - name: Set outputs
      shell: bash
      id: set-outputs
      run: |-
        echo "image=${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}" >> $GITHUB_OUTPUT
        echo "sbom=${{ steps.build-sbom.outputs.sbom }}" >> $GITHUB_OUTPUT
