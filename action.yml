# * Nais Nix Action
# This Action is for nix flakes in a nais platform context
# the .#image output will be uploaded to our artifact registry on GAR

# TODO: Add handlers for uploads, static assets to cdn and github releases?

# ** Action metadata
name: "Nais Nix Action"
description: "Check Nix flakes, build Nix packages and Docker images, and push the images"
inputs:
  # *** Google Cloud Parameters
  project_id:
    description: "Deprecated"
    required: false
  identity_provider:
    description: "Deprecated"
    required: false
  team:
    description: "Team name"
    required: true
  # *** Docker Parameters
  push:
    description: "Flag to indicate whether to push the images"
    default: true
  extra_tags:
    description: "Extra tags to add to the Docker images"
    required: false
    default: ""
  registry:
    description: "the docker registry to use"
    required: false
    default: "europe-north1-docker.pkg.dev"
  debug:
    description: "Print lots of outputs"
    required: false
    default: false

# *** output definitions
outputs:
  image:
    description: "the full image address"
    value: ${{ steps.set-outputs.outputs.image }}

# ** Step definitions
runs:
  using: "composite"
  steps:
    - name: Get the code from git repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # *** Install nix on the action runner
    - name: Install Nix
      uses: cachix/install-nix-action@v31

    - name: Install cache action
      uses: DeterminateSystems/magic-nix-cache-action@main

      with:
        extra_nix_config: |
          extra-experimental-features = nix-command flakes pipe-operators
          accept-flake-config = true

    # *** Flake health check
    - name: Check Nix flake inputs
      run: nix flake check
      shell: bash

    # *** Env setup
    # This is the same as nais/login but without the buildx dependency
    - name: Setup environment
      shell: bash
      id: setup
      run: |
        if [ -z "${{ inputs.team }}" ]; then
          echo "::error ::team not set. Please provide as input."
          exit 1
        fi

        if [ -n "${{ inputs.project_id}}" ]; then
          echo "::notice ::project_id is deprecated and should not be set, please remove from your workflow. The Github environment variable will be removed from the organization in the future"
        fi

        if [ -n "${{ inputs.identity_provider }}" ]; then
          echo "::notice ::identity_provider is deprecated and should not be set, please remove from your workflow. The Github environment variable will be removed from the organization in the future"
        fi

        set +o pipefail
        set +e
        DEPLOY_JSON=$(mktemp)
        wget -O "$DEPLOY_JSON" https://storage.googleapis.com/github-deploy-data/"$GITHUB_REPOSITORY_OWNER.json" 2>/dev/null
        WGET_EXIT_CODE=$?

        if [ $WGET_EXIT_CODE -ne 0 ]; then
            echo "::warning ::failed getting deploy_data, using fallback"
            project_id="${{ inputs.project_id }}"
        else
            project_id=$(jq --raw-output '.NAIS_MANAGEMENT_PROJECT_ID' < "$DEPLOY_JSON")
        fi
        slug=${{ inputs.team }}
        prefix="gar"
        maxLength=30

        hash=$(echo -n "$slug" | sha256sum | cut -d ' ' -f 1)

        prefixLength=${#prefix}
        hashLength=4
        slugLength=$((maxLength - prefixLength - hashLength - 2))

        truncatedSlug=$(echo -n "${slug:0:$slugLength}" | sed 's/-$//')
        truncatedHash=$(echo -n "$hash" | head -c $hashLength)

        # Most of these outputs should probably be envs
        echo "project_id=${project_id}" >> $GITHUB_OUTPUT
        echo "sa_email=${prefix}-${truncatedSlug}-${truncatedHash}@${project_id}.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
        echo "gar_registry_url=${{ inputs.registry }}/${project_id}/${{ inputs.team }}" >> $GITHUB_OUTPUT

    # *** Flake analysis
    - name: Analyze
      id: analyze
      shell: bash
      run: |
        image_name=$(nix eval .#image.drvAttrs.imageName | tr -d '"')
        image_address_prefix="${{ inputs.registry }}/${{ steps.setup.outputs.project_id }}/${{ inputs.team }}/"
        if [[ $image_name == "$image_address_prefix"* ]]; then
          # Avoid duplication if team already set it,
          #  say for simplifying their GH workflow wrt. nais's `spec.image`
          image_name=${image_name#"$image_address_prefix"}
        fi
        echo "image=${image_name}" >> $GITHUB_OUTPUT

        image_tag=$(nix eval .#image.drvAttrs.imageTag | tr -d '"')

        echo "tag=${image_tag}" >> $GITHUB_OUTPUT

        SBOM=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | grep -q sbom && echo true || echo false)
        SPEC=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | grep -q spec && echo true || echo false)

        echo "sbom=${SBOM}" >> $GITHUB_OUTPUT
        echo "spec=${SPEC}" >> $GITHUB_OUTPUT
        echo "image_address=${image_address_prefix}${image_name}" >> $GITHUB_OUTPUT

    # *** Add banner with a summary of the image analysis etc
    # - this should be distributed over all the steps
    - name: add banner
      shell: bash
      run: |
        echo "# ![](https://avatars.githubusercontent.com/u/29488289?s=30) Nais nix build" >> $GITHUB_STEP_SUMMARY
        echo "Using the [nais-nix-action](https://github.com/nais/nais-nix-action)" >> $GITHUB_STEP_SUMMARY

    # *** Build SBOM, should the package exist
    - name: Build SBOM
      if: ${{ steps.analyze.outputs.sbom == 'true' }}
      id: build-sbom
      shell: bash
      run: |
        nix build .#sbom --out-link sbom.json
        echo "✅ Built SBOM, $(wc -l sbom.json | awk '{print $1}') lines" >> $GITHUB_STEP_SUMMARY
        echo "sbom=sbom.json" >> $GITHUB_OUTPUT

    # *** Build app spec, should the package exist
    - name: Build spec
      if: ${{ steps.analyze.outputs.spec == 'true' }}
      id: build-spec
      shell: bash
      run: |
        nix build .#spec --out-link spec.yaml
        echo "✅ Built Nais spec as spec.yaml, $(wc -c spec.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY

    - name: Upload spec
      if: ${{ steps.analyze.outputs.spec == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        # what to upload
        path: spec.yaml

        # what to call the upload
        name: spec.yaml

    # *** Build and load images
    # Build the images as a tarball, load the image and retag it with "fully qualified OCI reference name"
    - name: Build Images
      shell: bash
      run: |
        LOADED_IMAGE=$(nix build .#image --out-link result-image && docker load < result-image | awk -F ': ' '{print $2}')

        docker tag $LOADED_IMAGE ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}

        echo "✅ Built image: ${{ steps.analyze.outputs.image_address }}" >> $GITHUB_STEP_SUMMARY

    # *** Goggle clou id: build-images d authentication
    # The "identity provider" here is a _workload identity_
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "nais/login@v0"
      with:
        team: ${{ inputs.team }}

    - name: Push image to registry
      id: push
      shell: bash
      run: |
        docker images
        docker push ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}
        # TODO: There should be a little for loop over the tags from the extra tags input.
        docker tag ${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }} ${{ steps.analyze.outputs.image_address }}:latest

        docker push ${{ steps.analyze.outputs.image_address }}:latest | tee push_output.txt
        image_digest=$(grep "digest:" push_output.txt | awk '{ print $3 }')
        echo "image_digest=${image_digest}" >> $GITHUB_OUTPUT

    # *** Run cosign et al.
    - name: "Generate SBOM, attest and sign image"
      if: "${{ inputs.push == 'true' && steps.analyze.outputs.sbom == 'true' }}"
      uses: nais/attest-sign@v1.3.1
      with:
        image_ref: ${{ steps.analyze.outputs.image_address }}@${{ steps.push.outputs.image_digest }}
        sbom: ${{ steps.build-sbom.outputs.sbom }}

    # *** These outputs are mostly used by nais/deploy-aciton
    - name: Set outputs
      shell: bash
      id: set-outputs
      run: |-
        echo "image=${{ steps.analyze.outputs.image_address }}:${{ steps.analyze.outputs.tag }}" >> $GITHUB_OUTPUT
        echo "sbom=${{ steps.build-sbom.outputs.sbom }}" >> $GITHUB_OUTPUT
