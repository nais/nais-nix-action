name: "Nais Nix Action"
description: "Check Nix flakes, build Nix packages and Docker containers, and push the containers"
inputs:
  publish:
    description: "List of packages to publish, space-separated values"
    required: false
    default: ""
  # Google Cloud Parameters
  workload_identity_provider:
    description: "Identity provider for Google Cloud authentication"
    required: true
  google_service_account:
    description: "Google Cloud service account"
    required: true
  # Docker Parameters
  push:
    description: "Flag to indicate whether to push the images"
    required: true
  registry:
    description: "Docker registry to which images will be pushed"
    required: true
    default: "europe-north1-docker.pkg.dev/nais-io/nais"
  extra_tags:
    description: "Extra tags to add to the Docker images"
    required: false
    default: ""

outputs:
  image:
    description: "the full image address"
    value: ${{ steps.set-outputs.outputs.image }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v3

    - name: Check Nix flake inputs
      uses: DeterminateSystems/flake-checker-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Nix Flake Check
      run: nix flake check -L
      shell: bash

    - name: Analyze
      id: analyze
      shell: bash
      run: |
        containerName=$(nix eval .#container.drvAttrs.imageName | tr -d '"')
        echo "Found this image: ${containerName}" >> $GITHUB_STEP_SUMMARY
        echo "container=${containerName}" >> $GITHUB_OUTPUT
        PACKAGES=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys[]' | tr "\n" " ")
        echo ${PACKAGES} >> $GITHUB_STEP_SUMMARY
        echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT

        echo "imageAddress=${{ inputs.registry }}/${containerName}" >> $GITHUB_OUTPUT

    # Add banner with a summary of the image analysis etc
    - name: add banner
      shell: bash
      run: |
        echo "# :rocket: NIX BUILDS :rocket:" >> $GITHUB_STEP_SUMMARY

    - name: Build Containers
      id: build-containers
      shell: bash
      run: |
        nix build .#container --out-link result-container && docker load < result-container
        NAME_AND_TAG=$(docker image ls | grep ${{ steps.analyze.outputs.container }} | head -n1 | awk '{print $1":"$2}')
        docker tag ${NAME_AND_TAG} ${{ steps.analyze.outputs.imageAddress }}

    - id: "auth"
      name: "Authenticate to Google Cloud"
      if: ${{ inputs.push == 'true' }}
      uses: "google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033" # ratchet:google-github-actions/auth@v1.1.1
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.google_service_account }}@nais-io.iam.gserviceaccount.com
        token_format: access_token

    - name: "Handle auth failure"
      if: ${{ failure() && steps.auth.outcome == 'failure' }}
      shell: bash
      run: |
        cat <<EOF
        ::error ::Failed to authenticate to Google Cloud.
        EOF

    - name: "Login to registry"
      id: login-to-registry
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # ratchet:docker/login-action@v2
      with:
        registry: "${{ inputs.registry }}"
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"

    - name: "Docker metadata"
      id: "metadata"
      uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e # ratchet:docker/metadata-action@v4
      with:
        images: |
          ${{ steps.analyze.outputs.imageAddress }}
        tags: |
          type=raw,value={{date 'YYYY-MM-DD-HHmmss' tz='Europe/Oslo'}}-{{sha}}
          type=raw,value=latest
          type=raw,value=${{inputs.extra_tags}}

    - name: Push image to registry
      id: push
      shell: bash
      run: |
        docker push ${{ steps.analyze.outputs.imageAddress }}

    - name: Set outputs
      shell: bash
      id: set-outputs
      run: |-
        echo "image=${{ steps.analyze.outputs.imageAddress }}" >> $GITHUB_OUTPUT
